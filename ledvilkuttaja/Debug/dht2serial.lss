
dht2serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000036  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000143  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000151  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000745  00000000  00000000  00000179  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c5  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021c  00000000  00000000  00000d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000163  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007d  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init    00000014  00000074  00000074  000000e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000003e  00000036  00000036  000000aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000098  00000098  0000010c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  0000009a  0000009a  0000010e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  0000009c  0000009c  00000110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    0000000e  00000088  00000088  000000fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000002  0000009e  0000009e  00000112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	49 c0       	rjmp	.+146    	; 0x96 <__bad_interrupt>
   4:	48 c0       	rjmp	.+144    	; 0x96 <__bad_interrupt>
   6:	47 c0       	rjmp	.+142    	; 0x96 <__bad_interrupt>
   8:	46 c0       	rjmp	.+140    	; 0x96 <__bad_interrupt>
   a:	45 c0       	rjmp	.+138    	; 0x96 <__bad_interrupt>
   c:	44 c0       	rjmp	.+136    	; 0x96 <__bad_interrupt>
   e:	43 c0       	rjmp	.+134    	; 0x96 <__bad_interrupt>
  10:	42 c0       	rjmp	.+132    	; 0x96 <__bad_interrupt>
  12:	41 c0       	rjmp	.+130    	; 0x96 <__bad_interrupt>
  14:	40 c0       	rjmp	.+128    	; 0x96 <__bad_interrupt>
  16:	3f c0       	rjmp	.+126    	; 0x96 <__bad_interrupt>
  18:	3e c0       	rjmp	.+124    	; 0x96 <__bad_interrupt>
  1a:	3d c0       	rjmp	.+122    	; 0x96 <__bad_interrupt>
  1c:	3c c0       	rjmp	.+120    	; 0x96 <__bad_interrupt>
  1e:	3b c0       	rjmp	.+118    	; 0x96 <__bad_interrupt>
  20:	3a c0       	rjmp	.+116    	; 0x96 <__bad_interrupt>
  22:	39 c0       	rjmp	.+114    	; 0x96 <__bad_interrupt>
  24:	38 c0       	rjmp	.+112    	; 0x96 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	03 d0       	rcall	.+6      	; 0x36 <_etext>
  30:	2b c0       	rjmp	.+86     	; 0x88 <exit>

00000032 <_exit>:
  32:	f8 94       	cli

00000034 <__stop_program>:
  34:	ff cf       	rjmp	.-2      	; 0x34 <__stop_program>

Disassembly of section .text:

00000096 <__bad_interrupt>:
  96:	b4 cf       	rjmp	.-152    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init:

00000074 <init>:
#define LED_PIN PD6        // LED kytketty porttiin PD6
#define BUTTON_PIN PD5     // Painonappi kytketty porttiin PD5

void init() {
	// Aseta LED_PIN lähtötilaan
	DDRD |= (1 << LED_PIN);
  74:	81 b3       	in	r24, 0x11	; 17
  76:	80 64       	ori	r24, 0x40	; 64
  78:	81 bb       	out	0x11, r24	; 17
	
	// Aseta BUTTON_PIN tulotilaan
	DDRD &= ~(1 << BUTTON_PIN);
  7a:	81 b3       	in	r24, 0x11	; 17
  7c:	8f 7d       	andi	r24, 0xDF	; 223
  7e:	81 bb       	out	0x11, r24	; 17
	
	// Aseta pull-up vastus BUTTON_PIN:lle
	PORTD |= (1 << BUTTON_PIN);
  80:	82 b3       	in	r24, 0x12	; 18
  82:	80 62       	ori	r24, 0x20	; 32
  84:	82 bb       	out	0x12, r24	; 18
  86:	08 95       	ret

Disassembly of section .text.main:

00000036 <main>:
}

int main() {
	// Alustetaan portit ja pinnit
	init();
  36:	1e d0       	rcall	.+60     	; 0x74 <init>
	
	// Alustetaan tila muuttujaan, joka pitää kirjaa LED:n tilasta
	uint8_t led_on = 0;
  38:	90 e0       	ldi	r25, 0x00	; 0

	while (1) {
		// Tarkista, onko painonappia painettu (BUTTON_PIN tilassa LOW)
		if (!(PIND & (1 << BUTTON_PIN))) {
  3a:	85 99       	sbic	0x10, 5	; 16
  3c:	17 c0       	rjmp	.+46     	; 0x6c <__SREG__+0x2d>
			// LED vilkkuu kun painiketta painetaan
			led_on = !led_on;  // Vaihda LED:n tila
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	91 11       	cpse	r25, r1
  42:	80 e0       	ldi	r24, 0x00	; 0
			
			// Aseta LED_PIN tilaan HIGH tai LOW
			if (led_on) {
  44:	91 11       	cpse	r25, r1
  46:	04 c0       	rjmp	.+8      	; 0x50 <__SREG__+0x11>
				PORTD |= (1 << LED_PIN);  // Kytke LED päälle
  48:	92 b3       	in	r25, 0x12	; 18
  4a:	90 64       	ori	r25, 0x40	; 64
  4c:	92 bb       	out	0x12, r25	; 18
  4e:	03 c0       	rjmp	.+6      	; 0x56 <__SREG__+0x17>
				} else {
				PORTD &= ~(1 << LED_PIN); // Kytke LED pois päältä
  50:	92 b3       	in	r25, 0x12	; 18
  52:	9f 7b       	andi	r25, 0xBF	; 191
  54:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	34 e3       	ldi	r19, 0x34	; 52
  5a:	9c e0       	ldi	r25, 0x0C	; 12
  5c:	21 50       	subi	r18, 0x01	; 1
  5e:	30 40       	sbci	r19, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	e1 f7       	brne	.-8      	; 0x5c <__SREG__+0x1d>
  64:	00 c0       	rjmp	.+0      	; 0x66 <__SREG__+0x27>
  66:	00 00       	nop

	while (1) {
		// Tarkista, onko painonappia painettu (BUTTON_PIN tilassa LOW)
		if (!(PIND & (1 << BUTTON_PIN))) {
			// LED vilkkuu kun painiketta painetaan
			led_on = !led_on;  // Vaihda LED:n tila
  68:	98 2f       	mov	r25, r24
  6a:	e7 cf       	rjmp	.-50     	; 0x3a <main+0x4>
			}
			
			_delay_ms(250);  // Odota 0.25 sekuntia (250 ms)
			} else {
			// Jos painiketta ei paineta, pidä LED pois päältä
			PORTD &= ~(1 << LED_PIN);  // Varmista, että LED on sammutettu
  6c:	82 b3       	in	r24, 0x12	; 18
  6e:	8f 7b       	andi	r24, 0xBF	; 191
  70:	82 bb       	out	0x12, r24	; 18
  72:	e3 cf       	rjmp	.-58     	; 0x3a <main+0x4>

Disassembly of section .text.__dummy_fini:

00000098 <_fini>:
  98:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000009a <__funcs_on_exit>:
  9a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000009c <__simulator_exit>:
  9c:	08 95       	ret

Disassembly of section .text.exit:

00000088 <exit>:
  88:	ec 01       	movw	r28, r24
  8a:	07 d0       	rcall	.+14     	; 0x9a <__funcs_on_exit>
  8c:	05 d0       	rcall	.+10     	; 0x98 <_fini>
  8e:	ce 01       	movw	r24, r28
  90:	05 d0       	rcall	.+10     	; 0x9c <__simulator_exit>
  92:	ce 01       	movw	r24, r28
  94:	04 d0       	rcall	.+8      	; 0x9e <_Exit>

Disassembly of section .text._Exit:

0000009e <_Exit>:
  9e:	c9 df       	rcall	.-110    	; 0x32 <_exit>
